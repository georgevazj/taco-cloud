name: Taco Cloud CI
env:
  APP_NAME: "taco-cloud"
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}
  IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  IMAGE_TAGS: ""
on:
  push:
    branches:
      - main
      - master
      - dev

jobs:
  build-maven:
    name: Build & Test
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      #- name: Build with Maven
      #  run: mvn --batch-mode --update-snapshots verify

      - name: Package artifact
        run: mkdir staging && cp target/*.jar staging

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: taco-cloud
          path: staging
          retention-days: 5

  build-docker-and-push:
    name: Build image & Push
    runs-on: ubuntu-latest
    needs: build-maven
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      digest: ${{ steps.push-image.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: taco-cloud

      - name: Check folder
        run: ls -lha

      - name: Determine app name
        if: env.APP_NAME == ''
        run: |
          echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Determine image tags
        if: env.IMAGE_TAGS == ''
        run: |
          echo "IMAGE_TAGS=${GITHUB_SHA}" | tee -a $GITHUB_ENV

      - name: Build from Dockerfile
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          dockerfiles: |
            ./Dockerfile

      # Docker login is required to push to the image registry.
      - name: Docker login
        run: |
          docker login -u ${{ secrets.IMAGE_REGISTRY_USER }} -p ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
          tls-verify: true

  update-manifests:
    name: Update manifests
    needs: "build-docker-and-push"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update manifests with kustomize
        working-directory: "manifests"
        run: |
          kustomize edit set image app-image=${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}@${{ needs.build-and-push.outputs.digest }}
          kustomize build .
      - name: Commit and push changes
        uses: devops-infra/action-commit-push@v0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: Update deployment image tag to ${{ needs.build-and-push.outputs.digest }}